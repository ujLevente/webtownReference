/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package hu.webtown.liferay.portlet.reference.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.exportimport.kernel.lar.StagedModelType;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.NoSuchModelException;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ContainerModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.TrashedModel;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.Validator;
import com.liferay.portal.kernel.workflow.WorkflowConstants;

import hu.webtown.liferay.portlet.reference.model.Reference;
import hu.webtown.liferay.portlet.reference.model.ReferenceModel;
import hu.webtown.liferay.portlet.reference.model.ReferenceSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Reference service. Represents a row in the &quot;Reference&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link ReferenceModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ReferenceImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see ReferenceImpl
 * @see Reference
 * @see ReferenceModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class ReferenceModelImpl extends BaseModelImpl<Reference>
	implements ReferenceModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a reference model instance should use the {@link Reference} interface instead.
	 */
	public static final String TABLE_NAME = "Reference";
	public static final Object[][] TABLE_COLUMNS = {
			{ "uuid_", Types.VARCHAR },
			{ "id_", Types.BIGINT },
			{ "resourcePrimKey", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "referenceId", Types.VARCHAR },
			{ "version", Types.DOUBLE },
			{ "name", Types.VARCHAR },
			{ "urlTitle", Types.VARCHAR },
			{ "shortDescription", Types.CLOB },
			{ "description", Types.CLOB },
			{ "realizationDate", Types.TIMESTAMP },
			{ "emphasized", Types.BOOLEAN },
			{ "overlayText", Types.VARCHAR },
			{ "overlayUrl", Types.VARCHAR },
			{ "lastPublishDate", Types.TIMESTAMP },
			{ "status", Types.INTEGER },
			{ "statusByUserId", Types.BIGINT },
			{ "statusByUserName", Types.VARCHAR },
			{ "statusDate", Types.TIMESTAMP }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("id_", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("resourcePrimKey", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("referenceId", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("version", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("name", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("urlTitle", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("shortDescription", Types.CLOB);
		TABLE_COLUMNS_MAP.put("description", Types.CLOB);
		TABLE_COLUMNS_MAP.put("realizationDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("emphasized", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("overlayText", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("overlayUrl", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("lastPublishDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("status", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("statusByUserId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("statusByUserName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("statusDate", Types.TIMESTAMP);
	}

	public static final String TABLE_SQL_CREATE = "create table Reference (uuid_ VARCHAR(75) null,id_ LONG not null primary key,resourcePrimKey LONG,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,referenceId VARCHAR(75) null,version DOUBLE,name VARCHAR(255) null,urlTitle VARCHAR(255) null,shortDescription TEXT null,description TEXT null,realizationDate DATE null,emphasized BOOLEAN,overlayText VARCHAR(255) null,overlayUrl VARCHAR(255) null,lastPublishDate DATE null,status INTEGER,statusByUserId LONG,statusByUserName VARCHAR(75) null,statusDate DATE null)";
	public static final String TABLE_SQL_DROP = "drop table Reference";
	public static final String ORDER_BY_JPQL = " ORDER BY reference.referenceId ASC, reference.version DESC";
	public static final String ORDER_BY_SQL = " ORDER BY Reference.referenceId ASC, Reference.version DESC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(hu.webtown.liferay.portlet.reference.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.hu.webtown.liferay.portlet.reference.model.Reference"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(hu.webtown.liferay.portlet.reference.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.hu.webtown.liferay.portlet.reference.model.Reference"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(hu.webtown.liferay.portlet.reference.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.hu.webtown.liferay.portlet.reference.model.Reference"),
			true);
	public static final long COMPANYID_COLUMN_BITMASK = 1L;
	public static final long GROUPID_COLUMN_BITMASK = 2L;
	public static final long REFERENCEID_COLUMN_BITMASK = 4L;
	public static final long RESOURCEPRIMKEY_COLUMN_BITMASK = 8L;
	public static final long STATUS_COLUMN_BITMASK = 16L;
	public static final long URLTITLE_COLUMN_BITMASK = 32L;
	public static final long USERID_COLUMN_BITMASK = 64L;
	public static final long UUID_COLUMN_BITMASK = 128L;
	public static final long VERSION_COLUMN_BITMASK = 256L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Reference toModel(ReferenceSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Reference model = new ReferenceImpl();

		model.setUuid(soapModel.getUuid());
		model.setId(soapModel.getId());
		model.setResourcePrimKey(soapModel.getResourcePrimKey());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setReferenceId(soapModel.getReferenceId());
		model.setVersion(soapModel.getVersion());
		model.setName(soapModel.getName());
		model.setUrlTitle(soapModel.getUrlTitle());
		model.setShortDescription(soapModel.getShortDescription());
		model.setDescription(soapModel.getDescription());
		model.setRealizationDate(soapModel.getRealizationDate());
		model.setEmphasized(soapModel.isEmphasized());
		model.setOverlayText(soapModel.getOverlayText());
		model.setOverlayUrl(soapModel.getOverlayUrl());
		model.setLastPublishDate(soapModel.getLastPublishDate());
		model.setStatus(soapModel.getStatus());
		model.setStatusByUserId(soapModel.getStatusByUserId());
		model.setStatusByUserName(soapModel.getStatusByUserName());
		model.setStatusDate(soapModel.getStatusDate());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Reference> toModels(ReferenceSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Reference> models = new ArrayList<Reference>(soapModels.length);

		for (ReferenceSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(hu.webtown.liferay.portlet.reference.service.util.ServiceProps.get(
				"lock.expiration.time.hu.webtown.liferay.portlet.reference.model.Reference"));

	public ReferenceModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Reference.class;
	}

	@Override
	public String getModelClassName() {
		return Reference.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("uuid", getUuid());
		attributes.put("id", getId());
		attributes.put("resourcePrimKey", getResourcePrimKey());
		attributes.put("groupId", getGroupId());
		attributes.put("companyId", getCompanyId());
		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("referenceId", getReferenceId());
		attributes.put("version", getVersion());
		attributes.put("name", getName());
		attributes.put("urlTitle", getUrlTitle());
		attributes.put("shortDescription", getShortDescription());
		attributes.put("description", getDescription());
		attributes.put("realizationDate", getRealizationDate());
		attributes.put("emphasized", isEmphasized());
		attributes.put("overlayText", getOverlayText());
		attributes.put("overlayUrl", getOverlayUrl());
		attributes.put("lastPublishDate", getLastPublishDate());
		attributes.put("status", getStatus());
		attributes.put("statusByUserId", getStatusByUserId());
		attributes.put("statusByUserName", getStatusByUserName());
		attributes.put("statusDate", getStatusDate());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String uuid = (String)attributes.get("uuid");

		if (uuid != null) {
			setUuid(uuid);
		}

		Long id = (Long)attributes.get("id");

		if (id != null) {
			setId(id);
		}

		Long resourcePrimKey = (Long)attributes.get("resourcePrimKey");

		if (resourcePrimKey != null) {
			setResourcePrimKey(resourcePrimKey);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		String referenceId = (String)attributes.get("referenceId");

		if (referenceId != null) {
			setReferenceId(referenceId);
		}

		Double version = (Double)attributes.get("version");

		if (version != null) {
			setVersion(version);
		}

		String name = (String)attributes.get("name");

		if (name != null) {
			setName(name);
		}

		String urlTitle = (String)attributes.get("urlTitle");

		if (urlTitle != null) {
			setUrlTitle(urlTitle);
		}

		String shortDescription = (String)attributes.get("shortDescription");

		if (shortDescription != null) {
			setShortDescription(shortDescription);
		}

		String description = (String)attributes.get("description");

		if (description != null) {
			setDescription(description);
		}

		Date realizationDate = (Date)attributes.get("realizationDate");

		if (realizationDate != null) {
			setRealizationDate(realizationDate);
		}

		Boolean emphasized = (Boolean)attributes.get("emphasized");

		if (emphasized != null) {
			setEmphasized(emphasized);
		}

		String overlayText = (String)attributes.get("overlayText");

		if (overlayText != null) {
			setOverlayText(overlayText);
		}

		String overlayUrl = (String)attributes.get("overlayUrl");

		if (overlayUrl != null) {
			setOverlayUrl(overlayUrl);
		}

		Date lastPublishDate = (Date)attributes.get("lastPublishDate");

		if (lastPublishDate != null) {
			setLastPublishDate(lastPublishDate);
		}

		Integer status = (Integer)attributes.get("status");

		if (status != null) {
			setStatus(status);
		}

		Long statusByUserId = (Long)attributes.get("statusByUserId");

		if (statusByUserId != null) {
			setStatusByUserId(statusByUserId);
		}

		String statusByUserName = (String)attributes.get("statusByUserName");

		if (statusByUserName != null) {
			setStatusByUserName(statusByUserName);
		}

		Date statusDate = (Date)attributes.get("statusDate");

		if (statusDate != null) {
			setStatusDate(statusDate);
		}
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@JSON
	@Override
	public long getId() {
		return _id;
	}

	@Override
	public void setId(long id) {
		_id = id;
	}

	@JSON
	@Override
	public long getResourcePrimKey() {
		return _resourcePrimKey;
	}

	@Override
	public void setResourcePrimKey(long resourcePrimKey) {
		_columnBitmask |= RESOURCEPRIMKEY_COLUMN_BITMASK;

		if (!_setOriginalResourcePrimKey) {
			_setOriginalResourcePrimKey = true;

			_originalResourcePrimKey = _resourcePrimKey;
		}

		_resourcePrimKey = resourcePrimKey;
	}

	@Override
	public boolean isResourceMain() {
		return true;
	}

	public long getOriginalResourcePrimKey() {
		return _originalResourcePrimKey;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_columnBitmask |= USERID_COLUMN_BITMASK;

		if (!_setOriginalUserId) {
			_setOriginalUserId = true;

			_originalUserId = _userId;
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	public long getOriginalUserId() {
		return _originalUserId;
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getReferenceId() {
		if (_referenceId == null) {
			return "";
		}
		else {
			return _referenceId;
		}
	}

	@Override
	public void setReferenceId(String referenceId) {
		_columnBitmask = -1L;

		if (_originalReferenceId == null) {
			_originalReferenceId = _referenceId;
		}

		_referenceId = referenceId;
	}

	public String getOriginalReferenceId() {
		return GetterUtil.getString(_originalReferenceId);
	}

	@JSON
	@Override
	public double getVersion() {
		return _version;
	}

	@Override
	public void setVersion(double version) {
		_columnBitmask = -1L;

		if (!_setOriginalVersion) {
			_setOriginalVersion = true;

			_originalVersion = _version;
		}

		_version = version;
	}

	public double getOriginalVersion() {
		return _originalVersion;
	}

	@JSON
	@Override
	public String getName() {
		if (_name == null) {
			return "";
		}
		else {
			return _name;
		}
	}

	@Override
	public void setName(String name) {
		_name = name;
	}

	@JSON
	@Override
	public String getUrlTitle() {
		if (_urlTitle == null) {
			return "";
		}
		else {
			return _urlTitle;
		}
	}

	@Override
	public void setUrlTitle(String urlTitle) {
		_columnBitmask |= URLTITLE_COLUMN_BITMASK;

		if (_originalUrlTitle == null) {
			_originalUrlTitle = _urlTitle;
		}

		_urlTitle = urlTitle;
	}

	public String getOriginalUrlTitle() {
		return GetterUtil.getString(_originalUrlTitle);
	}

	@JSON
	@Override
	public String getShortDescription() {
		if (_shortDescription == null) {
			return "";
		}
		else {
			return _shortDescription;
		}
	}

	@Override
	public void setShortDescription(String shortDescription) {
		_shortDescription = shortDescription;
	}

	@JSON
	@Override
	public String getDescription() {
		if (_description == null) {
			return "";
		}
		else {
			return _description;
		}
	}

	@Override
	public void setDescription(String description) {
		_description = description;
	}

	@JSON
	@Override
	public Date getRealizationDate() {
		return _realizationDate;
	}

	@Override
	public void setRealizationDate(Date realizationDate) {
		_realizationDate = realizationDate;
	}

	@JSON
	@Override
	public boolean getEmphasized() {
		return _emphasized;
	}

	@JSON
	@Override
	public boolean isEmphasized() {
		return _emphasized;
	}

	@Override
	public void setEmphasized(boolean emphasized) {
		_emphasized = emphasized;
	}

	@JSON
	@Override
	public String getOverlayText() {
		if (_overlayText == null) {
			return "";
		}
		else {
			return _overlayText;
		}
	}

	@Override
	public void setOverlayText(String overlayText) {
		_overlayText = overlayText;
	}

	@JSON
	@Override
	public String getOverlayUrl() {
		if (_overlayUrl == null) {
			return "";
		}
		else {
			return _overlayUrl;
		}
	}

	@Override
	public void setOverlayUrl(String overlayUrl) {
		_overlayUrl = overlayUrl;
	}

	@JSON
	@Override
	public Date getLastPublishDate() {
		return _lastPublishDate;
	}

	@Override
	public void setLastPublishDate(Date lastPublishDate) {
		_lastPublishDate = lastPublishDate;
	}

	@JSON
	@Override
	public int getStatus() {
		return _status;
	}

	@Override
	public void setStatus(int status) {
		_columnBitmask |= STATUS_COLUMN_BITMASK;

		if (!_setOriginalStatus) {
			_setOriginalStatus = true;

			_originalStatus = _status;
		}

		_status = status;
	}

	public int getOriginalStatus() {
		return _originalStatus;
	}

	@JSON
	@Override
	public long getStatusByUserId() {
		return _statusByUserId;
	}

	@Override
	public void setStatusByUserId(long statusByUserId) {
		_statusByUserId = statusByUserId;
	}

	@Override
	public String getStatusByUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getStatusByUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return "";
		}
	}

	@Override
	public void setStatusByUserUuid(String statusByUserUuid) {
	}

	@JSON
	@Override
	public String getStatusByUserName() {
		if (_statusByUserName == null) {
			return "";
		}
		else {
			return _statusByUserName;
		}
	}

	@Override
	public void setStatusByUserName(String statusByUserName) {
		_statusByUserName = statusByUserName;
	}

	@JSON
	@Override
	public Date getStatusDate() {
		return _statusDate;
	}

	@Override
	public void setStatusDate(Date statusDate) {
		_statusDate = statusDate;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(PortalUtil.getClassNameId(
				Reference.class.getName()));
	}

	@Override
	public com.liferay.trash.kernel.model.TrashEntry getTrashEntry()
		throws PortalException {
		if (!isInTrash()) {
			return null;
		}

		com.liferay.trash.kernel.model.TrashEntry trashEntry = com.liferay.trash.kernel.service.TrashEntryLocalServiceUtil.fetchEntry(getModelClassName(),
				getTrashEntryClassPK());

		if (trashEntry != null) {
			return trashEntry;
		}

		com.liferay.portal.kernel.trash.TrashHandler trashHandler = getTrashHandler();

		if (Validator.isNotNull(trashHandler.getContainerModelClassName(
						getPrimaryKey()))) {
			ContainerModel containerModel = null;

			try {
				containerModel = trashHandler.getParentContainerModel(this);
			}
			catch (NoSuchModelException nsme) {
				return null;
			}

			while (containerModel != null) {
				if (containerModel instanceof TrashedModel) {
					TrashedModel trashedModel = (TrashedModel)containerModel;

					return trashedModel.getTrashEntry();
				}

				trashHandler = com.liferay.portal.kernel.trash.TrashHandlerRegistryUtil.getTrashHandler(trashHandler.getContainerModelClassName(
							containerModel.getContainerModelId()));

				if (trashHandler == null) {
					return null;
				}

				containerModel = trashHandler.getContainerModel(containerModel.getParentContainerModelId());
			}
		}

		return null;
	}

	@Override
	public long getTrashEntryClassPK() {
		return getPrimaryKey();
	}

	/**
	* @deprecated As of 7.0.0, with no direct replacement
	*/
	@Deprecated
	@Override
	public com.liferay.portal.kernel.trash.TrashHandler getTrashHandler() {
		return com.liferay.portal.kernel.trash.TrashHandlerRegistryUtil.getTrashHandler(getModelClassName());
	}

	@Override
	public boolean isInTrash() {
		if (getStatus() == WorkflowConstants.STATUS_IN_TRASH) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isInTrashContainer() {
		com.liferay.portal.kernel.trash.TrashHandler trashHandler = getTrashHandler();

		if ((trashHandler == null) ||
				Validator.isNull(trashHandler.getContainerModelClassName(
						getPrimaryKey()))) {
			return false;
		}

		try {
			ContainerModel containerModel = trashHandler.getParentContainerModel(this);

			if (containerModel == null) {
				return false;
			}

			if (containerModel instanceof TrashedModel) {
				return ((TrashedModel)containerModel).isInTrash();
			}
		}
		catch (Exception e) {
		}

		return false;
	}

	@Override
	public boolean isInTrashExplicitly() {
		if (!isInTrash()) {
			return false;
		}

		com.liferay.trash.kernel.model.TrashEntry trashEntry = com.liferay.trash.kernel.service.TrashEntryLocalServiceUtil.fetchEntry(getModelClassName(),
				getTrashEntryClassPK());

		if (trashEntry != null) {
			return true;
		}

		return false;
	}

	@Override
	public boolean isInTrashImplicitly() {
		if (!isInTrash()) {
			return false;
		}

		com.liferay.trash.kernel.model.TrashEntry trashEntry = com.liferay.trash.kernel.service.TrashEntryLocalServiceUtil.fetchEntry(getModelClassName(),
				getTrashEntryClassPK());

		if (trashEntry != null) {
			return false;
		}

		return true;
	}

	@Override
	public boolean isApproved() {
		if (getStatus() == WorkflowConstants.STATUS_APPROVED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isDenied() {
		if (getStatus() == WorkflowConstants.STATUS_DENIED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isDraft() {
		if (getStatus() == WorkflowConstants.STATUS_DRAFT) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isExpired() {
		if (getStatus() == WorkflowConstants.STATUS_EXPIRED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isInactive() {
		if (getStatus() == WorkflowConstants.STATUS_INACTIVE) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isIncomplete() {
		if (getStatus() == WorkflowConstants.STATUS_INCOMPLETE) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isPending() {
		if (getStatus() == WorkflowConstants.STATUS_PENDING) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isScheduled() {
		if (getStatus() == WorkflowConstants.STATUS_SCHEDULED) {
			return true;
		}
		else {
			return false;
		}
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			Reference.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Reference toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Reference)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ReferenceImpl referenceImpl = new ReferenceImpl();

		referenceImpl.setUuid(getUuid());
		referenceImpl.setId(getId());
		referenceImpl.setResourcePrimKey(getResourcePrimKey());
		referenceImpl.setGroupId(getGroupId());
		referenceImpl.setCompanyId(getCompanyId());
		referenceImpl.setUserId(getUserId());
		referenceImpl.setUserName(getUserName());
		referenceImpl.setCreateDate(getCreateDate());
		referenceImpl.setModifiedDate(getModifiedDate());
		referenceImpl.setReferenceId(getReferenceId());
		referenceImpl.setVersion(getVersion());
		referenceImpl.setName(getName());
		referenceImpl.setUrlTitle(getUrlTitle());
		referenceImpl.setShortDescription(getShortDescription());
		referenceImpl.setDescription(getDescription());
		referenceImpl.setRealizationDate(getRealizationDate());
		referenceImpl.setEmphasized(isEmphasized());
		referenceImpl.setOverlayText(getOverlayText());
		referenceImpl.setOverlayUrl(getOverlayUrl());
		referenceImpl.setLastPublishDate(getLastPublishDate());
		referenceImpl.setStatus(getStatus());
		referenceImpl.setStatusByUserId(getStatusByUserId());
		referenceImpl.setStatusByUserName(getStatusByUserName());
		referenceImpl.setStatusDate(getStatusDate());

		referenceImpl.resetOriginalValues();

		return referenceImpl;
	}

	@Override
	public int compareTo(Reference reference) {
		int value = 0;

		value = getReferenceId().compareTo(reference.getReferenceId());

		if (value != 0) {
			return value;
		}

		if (getVersion() < reference.getVersion()) {
			value = -1;
		}
		else if (getVersion() > reference.getVersion()) {
			value = 1;
		}
		else {
			value = 0;
		}

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Reference)) {
			return false;
		}

		Reference reference = (Reference)obj;

		long primaryKey = reference.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		ReferenceModelImpl referenceModelImpl = this;

		referenceModelImpl._originalUuid = referenceModelImpl._uuid;

		referenceModelImpl._originalResourcePrimKey = referenceModelImpl._resourcePrimKey;

		referenceModelImpl._setOriginalResourcePrimKey = false;

		referenceModelImpl._originalGroupId = referenceModelImpl._groupId;

		referenceModelImpl._setOriginalGroupId = false;

		referenceModelImpl._originalCompanyId = referenceModelImpl._companyId;

		referenceModelImpl._setOriginalCompanyId = false;

		referenceModelImpl._originalUserId = referenceModelImpl._userId;

		referenceModelImpl._setOriginalUserId = false;

		referenceModelImpl._setModifiedDate = false;

		referenceModelImpl._originalReferenceId = referenceModelImpl._referenceId;

		referenceModelImpl._originalVersion = referenceModelImpl._version;

		referenceModelImpl._setOriginalVersion = false;

		referenceModelImpl._originalUrlTitle = referenceModelImpl._urlTitle;

		referenceModelImpl._originalStatus = referenceModelImpl._status;

		referenceModelImpl._setOriginalStatus = false;

		referenceModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Reference> toCacheModel() {
		ReferenceCacheModel referenceCacheModel = new ReferenceCacheModel();

		referenceCacheModel.uuid = getUuid();

		String uuid = referenceCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			referenceCacheModel.uuid = null;
		}

		referenceCacheModel.id = getId();

		referenceCacheModel.resourcePrimKey = getResourcePrimKey();

		referenceCacheModel.groupId = getGroupId();

		referenceCacheModel.companyId = getCompanyId();

		referenceCacheModel.userId = getUserId();

		referenceCacheModel.userName = getUserName();

		String userName = referenceCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			referenceCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			referenceCacheModel.createDate = createDate.getTime();
		}
		else {
			referenceCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			referenceCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			referenceCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		referenceCacheModel.referenceId = getReferenceId();

		String referenceId = referenceCacheModel.referenceId;

		if ((referenceId != null) && (referenceId.length() == 0)) {
			referenceCacheModel.referenceId = null;
		}

		referenceCacheModel.version = getVersion();

		referenceCacheModel.name = getName();

		String name = referenceCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			referenceCacheModel.name = null;
		}

		referenceCacheModel.urlTitle = getUrlTitle();

		String urlTitle = referenceCacheModel.urlTitle;

		if ((urlTitle != null) && (urlTitle.length() == 0)) {
			referenceCacheModel.urlTitle = null;
		}

		referenceCacheModel.shortDescription = getShortDescription();

		String shortDescription = referenceCacheModel.shortDescription;

		if ((shortDescription != null) && (shortDescription.length() == 0)) {
			referenceCacheModel.shortDescription = null;
		}

		referenceCacheModel.description = getDescription();

		String description = referenceCacheModel.description;

		if ((description != null) && (description.length() == 0)) {
			referenceCacheModel.description = null;
		}

		Date realizationDate = getRealizationDate();

		if (realizationDate != null) {
			referenceCacheModel.realizationDate = realizationDate.getTime();
		}
		else {
			referenceCacheModel.realizationDate = Long.MIN_VALUE;
		}

		referenceCacheModel.emphasized = isEmphasized();

		referenceCacheModel.overlayText = getOverlayText();

		String overlayText = referenceCacheModel.overlayText;

		if ((overlayText != null) && (overlayText.length() == 0)) {
			referenceCacheModel.overlayText = null;
		}

		referenceCacheModel.overlayUrl = getOverlayUrl();

		String overlayUrl = referenceCacheModel.overlayUrl;

		if ((overlayUrl != null) && (overlayUrl.length() == 0)) {
			referenceCacheModel.overlayUrl = null;
		}

		Date lastPublishDate = getLastPublishDate();

		if (lastPublishDate != null) {
			referenceCacheModel.lastPublishDate = lastPublishDate.getTime();
		}
		else {
			referenceCacheModel.lastPublishDate = Long.MIN_VALUE;
		}

		referenceCacheModel.status = getStatus();

		referenceCacheModel.statusByUserId = getStatusByUserId();

		referenceCacheModel.statusByUserName = getStatusByUserName();

		String statusByUserName = referenceCacheModel.statusByUserName;

		if ((statusByUserName != null) && (statusByUserName.length() == 0)) {
			referenceCacheModel.statusByUserName = null;
		}

		Date statusDate = getStatusDate();

		if (statusDate != null) {
			referenceCacheModel.statusDate = statusDate.getTime();
		}
		else {
			referenceCacheModel.statusDate = Long.MIN_VALUE;
		}

		return referenceCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(49);

		sb.append("{uuid=");
		sb.append(getUuid());
		sb.append(", id=");
		sb.append(getId());
		sb.append(", resourcePrimKey=");
		sb.append(getResourcePrimKey());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", referenceId=");
		sb.append(getReferenceId());
		sb.append(", version=");
		sb.append(getVersion());
		sb.append(", name=");
		sb.append(getName());
		sb.append(", urlTitle=");
		sb.append(getUrlTitle());
		sb.append(", shortDescription=");
		sb.append(getShortDescription());
		sb.append(", description=");
		sb.append(getDescription());
		sb.append(", realizationDate=");
		sb.append(getRealizationDate());
		sb.append(", emphasized=");
		sb.append(isEmphasized());
		sb.append(", overlayText=");
		sb.append(getOverlayText());
		sb.append(", overlayUrl=");
		sb.append(getOverlayUrl());
		sb.append(", lastPublishDate=");
		sb.append(getLastPublishDate());
		sb.append(", status=");
		sb.append(getStatus());
		sb.append(", statusByUserId=");
		sb.append(getStatusByUserId());
		sb.append(", statusByUserName=");
		sb.append(getStatusByUserName());
		sb.append(", statusDate=");
		sb.append(getStatusDate());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(76);

		sb.append("<model><model-name>");
		sb.append("hu.webtown.liferay.portlet.reference.model.Reference");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>uuid</column-name><column-value><![CDATA[");
		sb.append(getUuid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>id</column-name><column-value><![CDATA[");
		sb.append(getId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>resourcePrimKey</column-name><column-value><![CDATA[");
		sb.append(getResourcePrimKey());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>referenceId</column-name><column-value><![CDATA[");
		sb.append(getReferenceId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>version</column-name><column-value><![CDATA[");
		sb.append(getVersion());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>name</column-name><column-value><![CDATA[");
		sb.append(getName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>urlTitle</column-name><column-value><![CDATA[");
		sb.append(getUrlTitle());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>shortDescription</column-name><column-value><![CDATA[");
		sb.append(getShortDescription());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>description</column-name><column-value><![CDATA[");
		sb.append(getDescription());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>realizationDate</column-name><column-value><![CDATA[");
		sb.append(getRealizationDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>emphasized</column-name><column-value><![CDATA[");
		sb.append(isEmphasized());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>overlayText</column-name><column-value><![CDATA[");
		sb.append(getOverlayText());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>overlayUrl</column-name><column-value><![CDATA[");
		sb.append(getOverlayUrl());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>lastPublishDate</column-name><column-value><![CDATA[");
		sb.append(getLastPublishDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>status</column-name><column-value><![CDATA[");
		sb.append(getStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>statusByUserId</column-name><column-value><![CDATA[");
		sb.append(getStatusByUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>statusByUserName</column-name><column-value><![CDATA[");
		sb.append(getStatusByUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>statusDate</column-name><column-value><![CDATA[");
		sb.append(getStatusDate());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = Reference.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			Reference.class, ModelWrapper.class
		};
	private String _uuid;
	private String _originalUuid;
	private long _id;
	private long _resourcePrimKey;
	private long _originalResourcePrimKey;
	private boolean _setOriginalResourcePrimKey;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _userId;
	private long _originalUserId;
	private boolean _setOriginalUserId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _referenceId;
	private String _originalReferenceId;
	private double _version;
	private double _originalVersion;
	private boolean _setOriginalVersion;
	private String _name;
	private String _urlTitle;
	private String _originalUrlTitle;
	private String _shortDescription;
	private String _description;
	private Date _realizationDate;
	private boolean _emphasized;
	private String _overlayText;
	private String _overlayUrl;
	private Date _lastPublishDate;
	private int _status;
	private int _originalStatus;
	private boolean _setOriginalStatus;
	private long _statusByUserId;
	private String _statusByUserName;
	private Date _statusDate;
	private long _columnBitmask;
	private Reference _escapedModel;
}