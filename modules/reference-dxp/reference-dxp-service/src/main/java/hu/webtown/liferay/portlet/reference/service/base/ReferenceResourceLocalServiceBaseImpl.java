/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package hu.webtown.liferay.portlet.reference.service.base;

import aQute.bnd.annotation.ProviderType;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.dao.db.DB;
import com.liferay.portal.kernel.dao.db.DBManagerUtil;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.ActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.DefaultActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.IndexableActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.model.PersistedModel;
import com.liferay.portal.kernel.module.framework.service.IdentifiableOSGiService;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.service.BaseLocalServiceImpl;
import com.liferay.portal.kernel.service.PersistedModelLocalServiceRegistry;
import com.liferay.portal.kernel.service.persistence.ClassNamePersistence;
import com.liferay.portal.kernel.service.persistence.UserPersistence;
import com.liferay.portal.kernel.transaction.Transactional;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.spring.extender.service.ServiceReference;

import hu.webtown.liferay.portlet.reference.model.ReferenceResource;
import hu.webtown.liferay.portlet.reference.service.ReferenceResourceLocalService;
import hu.webtown.liferay.portlet.reference.service.persistence.ReferenceFinder;
import hu.webtown.liferay.portlet.reference.service.persistence.ReferenceImagePersistence;
import hu.webtown.liferay.portlet.reference.service.persistence.ReferencePersistence;
import hu.webtown.liferay.portlet.reference.service.persistence.ReferenceResourcePersistence;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the reference resource local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link hu.webtown.liferay.portlet.reference.service.impl.ReferenceResourceLocalServiceImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see hu.webtown.liferay.portlet.reference.service.impl.ReferenceResourceLocalServiceImpl
 * @see hu.webtown.liferay.portlet.reference.service.ReferenceResourceLocalServiceUtil
 * @generated
 */
@ProviderType
public abstract class ReferenceResourceLocalServiceBaseImpl
	extends BaseLocalServiceImpl implements ReferenceResourceLocalService,
		IdentifiableOSGiService {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Always use {@link hu.webtown.liferay.portlet.reference.service.ReferenceResourceLocalServiceUtil} to access the reference resource local service.
	 */

	/**
	 * Adds the reference resource to the database. Also notifies the appropriate model listeners.
	 *
	 * @param referenceResource the reference resource
	 * @return the reference resource that was added
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public ReferenceResource addReferenceResource(
		ReferenceResource referenceResource) {
		referenceResource.setNew(true);

		return referenceResourcePersistence.update(referenceResource);
	}

	/**
	 * Creates a new reference resource with the primary key. Does not add the reference resource to the database.
	 *
	 * @param resourcePrimKey the primary key for the new reference resource
	 * @return the new reference resource
	 */
	@Override
	@Transactional(enabled = false)
	public ReferenceResource createReferenceResource(long resourcePrimKey) {
		return referenceResourcePersistence.create(resourcePrimKey);
	}

	/**
	 * Deletes the reference resource with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * @param resourcePrimKey the primary key of the reference resource
	 * @return the reference resource that was removed
	 * @throws PortalException if a reference resource with the primary key could not be found
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public ReferenceResource deleteReferenceResource(long resourcePrimKey)
		throws PortalException {
		return referenceResourcePersistence.remove(resourcePrimKey);
	}

	/**
	 * Deletes the reference resource from the database. Also notifies the appropriate model listeners.
	 *
	 * @param referenceResource the reference resource
	 * @return the reference resource that was removed
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public ReferenceResource deleteReferenceResource(
		ReferenceResource referenceResource) {
		return referenceResourcePersistence.remove(referenceResource);
	}

	@Override
	public DynamicQuery dynamicQuery() {
		Class<?> clazz = getClass();

		return DynamicQueryFactoryUtil.forClass(ReferenceResource.class,
			clazz.getClassLoader());
	}

	/**
	 * Performs a dynamic query on the database and returns the matching rows.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery) {
		return referenceResourcePersistence.findWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Performs a dynamic query on the database and returns a range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link hu.webtown.liferay.portlet.reference.model.impl.ReferenceResourceModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @return the range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery, int start,
		int end) {
		return referenceResourcePersistence.findWithDynamicQuery(dynamicQuery,
			start, end);
	}

	/**
	 * Performs a dynamic query on the database and returns an ordered range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link hu.webtown.liferay.portlet.reference.model.impl.ReferenceResourceModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the ordered range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery, int start,
		int end, OrderByComparator<T> orderByComparator) {
		return referenceResourcePersistence.findWithDynamicQuery(dynamicQuery,
			start, end, orderByComparator);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery) {
		return referenceResourcePersistence.countWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @param projection the projection to apply to the query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery,
		Projection projection) {
		return referenceResourcePersistence.countWithDynamicQuery(dynamicQuery,
			projection);
	}

	@Override
	public ReferenceResource fetchReferenceResource(long resourcePrimKey) {
		return referenceResourcePersistence.fetchByPrimaryKey(resourcePrimKey);
	}

	/**
	 * Returns the reference resource matching the UUID and group.
	 *
	 * @param uuid the reference resource's UUID
	 * @param groupId the primary key of the group
	 * @return the matching reference resource, or <code>null</code> if a matching reference resource could not be found
	 */
	@Override
	public ReferenceResource fetchReferenceResourceByUuidAndGroupId(
		String uuid, long groupId) {
		return referenceResourcePersistence.fetchByUUID_G(uuid, groupId);
	}

	/**
	 * Returns the reference resource with the primary key.
	 *
	 * @param resourcePrimKey the primary key of the reference resource
	 * @return the reference resource
	 * @throws PortalException if a reference resource with the primary key could not be found
	 */
	@Override
	public ReferenceResource getReferenceResource(long resourcePrimKey)
		throws PortalException {
		return referenceResourcePersistence.findByPrimaryKey(resourcePrimKey);
	}

	@Override
	public ActionableDynamicQuery getActionableDynamicQuery() {
		ActionableDynamicQuery actionableDynamicQuery = new DefaultActionableDynamicQuery();

		actionableDynamicQuery.setBaseLocalService(referenceResourceLocalService);
		actionableDynamicQuery.setClassLoader(getClassLoader());
		actionableDynamicQuery.setModelClass(ReferenceResource.class);

		actionableDynamicQuery.setPrimaryKeyPropertyName("resourcePrimKey");

		return actionableDynamicQuery;
	}

	@Override
	public IndexableActionableDynamicQuery getIndexableActionableDynamicQuery() {
		IndexableActionableDynamicQuery indexableActionableDynamicQuery = new IndexableActionableDynamicQuery();

		indexableActionableDynamicQuery.setBaseLocalService(referenceResourceLocalService);
		indexableActionableDynamicQuery.setClassLoader(getClassLoader());
		indexableActionableDynamicQuery.setModelClass(ReferenceResource.class);

		indexableActionableDynamicQuery.setPrimaryKeyPropertyName(
			"resourcePrimKey");

		return indexableActionableDynamicQuery;
	}

	protected void initActionableDynamicQuery(
		ActionableDynamicQuery actionableDynamicQuery) {
		actionableDynamicQuery.setBaseLocalService(referenceResourceLocalService);
		actionableDynamicQuery.setClassLoader(getClassLoader());
		actionableDynamicQuery.setModelClass(ReferenceResource.class);

		actionableDynamicQuery.setPrimaryKeyPropertyName("resourcePrimKey");
	}

	/**
	 * @throws PortalException
	 */
	@Override
	public PersistedModel deletePersistedModel(PersistedModel persistedModel)
		throws PortalException {
		return referenceResourceLocalService.deleteReferenceResource((ReferenceResource)persistedModel);
	}

	@Override
	public PersistedModel getPersistedModel(Serializable primaryKeyObj)
		throws PortalException {
		return referenceResourcePersistence.findByPrimaryKey(primaryKeyObj);
	}

	/**
	 * Returns all the reference resources matching the UUID and company.
	 *
	 * @param uuid the UUID of the reference resources
	 * @param companyId the primary key of the company
	 * @return the matching reference resources, or an empty list if no matches were found
	 */
	@Override
	public List<ReferenceResource> getReferenceResourcesByUuidAndCompanyId(
		String uuid, long companyId) {
		return referenceResourcePersistence.findByUuid_C(uuid, companyId);
	}

	/**
	 * Returns a range of reference resources matching the UUID and company.
	 *
	 * @param uuid the UUID of the reference resources
	 * @param companyId the primary key of the company
	 * @param start the lower bound of the range of reference resources
	 * @param end the upper bound of the range of reference resources (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the range of matching reference resources, or an empty list if no matches were found
	 */
	@Override
	public List<ReferenceResource> getReferenceResourcesByUuidAndCompanyId(
		String uuid, long companyId, int start, int end,
		OrderByComparator<ReferenceResource> orderByComparator) {
		return referenceResourcePersistence.findByUuid_C(uuid, companyId,
			start, end, orderByComparator);
	}

	/**
	 * Returns the reference resource matching the UUID and group.
	 *
	 * @param uuid the reference resource's UUID
	 * @param groupId the primary key of the group
	 * @return the matching reference resource
	 * @throws PortalException if a matching reference resource could not be found
	 */
	@Override
	public ReferenceResource getReferenceResourceByUuidAndGroupId(String uuid,
		long groupId) throws PortalException {
		return referenceResourcePersistence.findByUUID_G(uuid, groupId);
	}

	/**
	 * Returns a range of all the reference resources.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link hu.webtown.liferay.portlet.reference.model.impl.ReferenceResourceModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param start the lower bound of the range of reference resources
	 * @param end the upper bound of the range of reference resources (not inclusive)
	 * @return the range of reference resources
	 */
	@Override
	public List<ReferenceResource> getReferenceResources(int start, int end) {
		return referenceResourcePersistence.findAll(start, end);
	}

	/**
	 * Returns the number of reference resources.
	 *
	 * @return the number of reference resources
	 */
	@Override
	public int getReferenceResourcesCount() {
		return referenceResourcePersistence.countAll();
	}

	/**
	 * Updates the reference resource in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * @param referenceResource the reference resource
	 * @return the reference resource that was updated
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public ReferenceResource updateReferenceResource(
		ReferenceResource referenceResource) {
		return referenceResourcePersistence.update(referenceResource);
	}

	/**
	 * Returns the reference local service.
	 *
	 * @return the reference local service
	 */
	public hu.webtown.liferay.portlet.reference.service.ReferenceLocalService getReferenceLocalService() {
		return referenceLocalService;
	}

	/**
	 * Sets the reference local service.
	 *
	 * @param referenceLocalService the reference local service
	 */
	public void setReferenceLocalService(
		hu.webtown.liferay.portlet.reference.service.ReferenceLocalService referenceLocalService) {
		this.referenceLocalService = referenceLocalService;
	}

	/**
	 * Returns the reference persistence.
	 *
	 * @return the reference persistence
	 */
	public ReferencePersistence getReferencePersistence() {
		return referencePersistence;
	}

	/**
	 * Sets the reference persistence.
	 *
	 * @param referencePersistence the reference persistence
	 */
	public void setReferencePersistence(
		ReferencePersistence referencePersistence) {
		this.referencePersistence = referencePersistence;
	}

	/**
	 * Returns the reference finder.
	 *
	 * @return the reference finder
	 */
	public ReferenceFinder getReferenceFinder() {
		return referenceFinder;
	}

	/**
	 * Sets the reference finder.
	 *
	 * @param referenceFinder the reference finder
	 */
	public void setReferenceFinder(ReferenceFinder referenceFinder) {
		this.referenceFinder = referenceFinder;
	}

	/**
	 * Returns the reference image local service.
	 *
	 * @return the reference image local service
	 */
	public hu.webtown.liferay.portlet.reference.service.ReferenceImageLocalService getReferenceImageLocalService() {
		return referenceImageLocalService;
	}

	/**
	 * Sets the reference image local service.
	 *
	 * @param referenceImageLocalService the reference image local service
	 */
	public void setReferenceImageLocalService(
		hu.webtown.liferay.portlet.reference.service.ReferenceImageLocalService referenceImageLocalService) {
		this.referenceImageLocalService = referenceImageLocalService;
	}

	/**
	 * Returns the reference image persistence.
	 *
	 * @return the reference image persistence
	 */
	public ReferenceImagePersistence getReferenceImagePersistence() {
		return referenceImagePersistence;
	}

	/**
	 * Sets the reference image persistence.
	 *
	 * @param referenceImagePersistence the reference image persistence
	 */
	public void setReferenceImagePersistence(
		ReferenceImagePersistence referenceImagePersistence) {
		this.referenceImagePersistence = referenceImagePersistence;
	}

	/**
	 * Returns the reference resource local service.
	 *
	 * @return the reference resource local service
	 */
	public ReferenceResourceLocalService getReferenceResourceLocalService() {
		return referenceResourceLocalService;
	}

	/**
	 * Sets the reference resource local service.
	 *
	 * @param referenceResourceLocalService the reference resource local service
	 */
	public void setReferenceResourceLocalService(
		ReferenceResourceLocalService referenceResourceLocalService) {
		this.referenceResourceLocalService = referenceResourceLocalService;
	}

	/**
	 * Returns the reference resource persistence.
	 *
	 * @return the reference resource persistence
	 */
	public ReferenceResourcePersistence getReferenceResourcePersistence() {
		return referenceResourcePersistence;
	}

	/**
	 * Sets the reference resource persistence.
	 *
	 * @param referenceResourcePersistence the reference resource persistence
	 */
	public void setReferenceResourcePersistence(
		ReferenceResourcePersistence referenceResourcePersistence) {
		this.referenceResourcePersistence = referenceResourcePersistence;
	}

	/**
	 * Returns the counter local service.
	 *
	 * @return the counter local service
	 */
	public com.liferay.counter.kernel.service.CounterLocalService getCounterLocalService() {
		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
	public void setCounterLocalService(
		com.liferay.counter.kernel.service.CounterLocalService counterLocalService) {
		this.counterLocalService = counterLocalService;
	}

	/**
	 * Returns the class name local service.
	 *
	 * @return the class name local service
	 */
	public com.liferay.portal.kernel.service.ClassNameLocalService getClassNameLocalService() {
		return classNameLocalService;
	}

	/**
	 * Sets the class name local service.
	 *
	 * @param classNameLocalService the class name local service
	 */
	public void setClassNameLocalService(
		com.liferay.portal.kernel.service.ClassNameLocalService classNameLocalService) {
		this.classNameLocalService = classNameLocalService;
	}

	/**
	 * Returns the class name persistence.
	 *
	 * @return the class name persistence
	 */
	public ClassNamePersistence getClassNamePersistence() {
		return classNamePersistence;
	}

	/**
	 * Sets the class name persistence.
	 *
	 * @param classNamePersistence the class name persistence
	 */
	public void setClassNamePersistence(
		ClassNamePersistence classNamePersistence) {
		this.classNamePersistence = classNamePersistence;
	}

	/**
	 * Returns the resource local service.
	 *
	 * @return the resource local service
	 */
	public com.liferay.portal.kernel.service.ResourceLocalService getResourceLocalService() {
		return resourceLocalService;
	}

	/**
	 * Sets the resource local service.
	 *
	 * @param resourceLocalService the resource local service
	 */
	public void setResourceLocalService(
		com.liferay.portal.kernel.service.ResourceLocalService resourceLocalService) {
		this.resourceLocalService = resourceLocalService;
	}

	/**
	 * Returns the user local service.
	 *
	 * @return the user local service
	 */
	public com.liferay.portal.kernel.service.UserLocalService getUserLocalService() {
		return userLocalService;
	}

	/**
	 * Sets the user local service.
	 *
	 * @param userLocalService the user local service
	 */
	public void setUserLocalService(
		com.liferay.portal.kernel.service.UserLocalService userLocalService) {
		this.userLocalService = userLocalService;
	}

	/**
	 * Returns the user persistence.
	 *
	 * @return the user persistence
	 */
	public UserPersistence getUserPersistence() {
		return userPersistence;
	}

	/**
	 * Sets the user persistence.
	 *
	 * @param userPersistence the user persistence
	 */
	public void setUserPersistence(UserPersistence userPersistence) {
		this.userPersistence = userPersistence;
	}

	public void afterPropertiesSet() {
		persistedModelLocalServiceRegistry.register("hu.webtown.liferay.portlet.reference.model.ReferenceResource",
			referenceResourceLocalService);
	}

	public void destroy() {
		persistedModelLocalServiceRegistry.unregister(
			"hu.webtown.liferay.portlet.reference.model.ReferenceResource");
	}

	/**
	 * Returns the OSGi service identifier.
	 *
	 * @return the OSGi service identifier
	 */
	@Override
	public String getOSGiServiceIdentifier() {
		return ReferenceResourceLocalService.class.getName();
	}

	protected Class<?> getModelClass() {
		return ReferenceResource.class;
	}

	protected String getModelClassName() {
		return ReferenceResource.class.getName();
	}

	/**
	 * Performs a SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) {
		try {
			DataSource dataSource = referenceResourcePersistence.getDataSource();

			DB db = DBManagerUtil.getDB();

			sql = db.buildSQL(sql);
			sql = PortalUtil.transformSQL(sql);

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
					sql);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	@BeanReference(type = hu.webtown.liferay.portlet.reference.service.ReferenceLocalService.class)
	protected hu.webtown.liferay.portlet.reference.service.ReferenceLocalService referenceLocalService;
	@BeanReference(type = ReferencePersistence.class)
	protected ReferencePersistence referencePersistence;
	@BeanReference(type = ReferenceFinder.class)
	protected ReferenceFinder referenceFinder;
	@BeanReference(type = hu.webtown.liferay.portlet.reference.service.ReferenceImageLocalService.class)
	protected hu.webtown.liferay.portlet.reference.service.ReferenceImageLocalService referenceImageLocalService;
	@BeanReference(type = ReferenceImagePersistence.class)
	protected ReferenceImagePersistence referenceImagePersistence;
	@BeanReference(type = ReferenceResourceLocalService.class)
	protected ReferenceResourceLocalService referenceResourceLocalService;
	@BeanReference(type = ReferenceResourcePersistence.class)
	protected ReferenceResourcePersistence referenceResourcePersistence;
	@ServiceReference(type = com.liferay.counter.kernel.service.CounterLocalService.class)
	protected com.liferay.counter.kernel.service.CounterLocalService counterLocalService;
	@ServiceReference(type = com.liferay.portal.kernel.service.ClassNameLocalService.class)
	protected com.liferay.portal.kernel.service.ClassNameLocalService classNameLocalService;
	@ServiceReference(type = ClassNamePersistence.class)
	protected ClassNamePersistence classNamePersistence;
	@ServiceReference(type = com.liferay.portal.kernel.service.ResourceLocalService.class)
	protected com.liferay.portal.kernel.service.ResourceLocalService resourceLocalService;
	@ServiceReference(type = com.liferay.portal.kernel.service.UserLocalService.class)
	protected com.liferay.portal.kernel.service.UserLocalService userLocalService;
	@ServiceReference(type = UserPersistence.class)
	protected UserPersistence userPersistence;
	@ServiceReference(type = PersistedModelLocalServiceRegistry.class)
	protected PersistedModelLocalServiceRegistry persistedModelLocalServiceRegistry;
}